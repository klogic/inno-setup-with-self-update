; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppPublisher "Refinitiv."
#define MyFolderApp "Refinitiv"
#define MyAppURL "http://www.example.com/"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{92A7903F-5AE6-4150-84BA-FF6E4067BA9C}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName="{autopf}\{#MyAppName}"
OutputDir="../dist/{#MyAppName}-x64-{#MyAppVersion}"
DisableProgramGroupPage=yes
; The [Icons] "quicklaunchicon" entry uses {userappdata} but its [Tasks] entry has a proper IsAdminInstallMode Check.
UsedUserAreasWarning=no
; Uncomment the following line to run in non administrative install mode (install for current user only.)
; PrivilegesRequired=lowest
; PrivilegesRequiredOverridesAllowed=commandline dialog
OutputBaseFilename={#MyExe}
PrivilegesRequired=none
UsePreviousAppDir=no
ShowLanguageDialog=no
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "japanese"; MessagesFile: "compiler:Languages\Japanese.isl"

[Dirs]
Name: {pf}\i-Catcher Console; permissions: everyone-modify admins-full;

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 6.1; Check: not IsAdminInstallMode

[Files]
Source: "..\pack\{#MyAppName}-win32-x64\*"; Permissions: everyone-full; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent shellexec 

[UninstallDelete]
Type: filesandordirs; Name: "{app}"

[code]
function GetCommandLineParam(inParam: String): String;
var
  I: Integer;
begin
  Result := 'False';
  for I := 1 to ParamCount do
    if CompareText(ParamStr(I), inParam) = 0 then
    begin
      Result := 'True';
      Break;
    end;
end;


function BoolToStr(Value : Boolean) : String;
begin
  if Value then
  begin
    Result := 'true'
  end
  else
  begin
    Result := 'false';
  end
end;

function ShouldSilentInstall():Boolean;
var
  mySilent: string;
begin
  Result := False
  mySilent := GetCommandLineParam('--silent');
  { MsgBox('silent intstall paramater is ' + mySilent, mbInformation, MB_OK); }
    if not (mySilent = 'False') then
    begin
      Result := True;
    end;
end;

function ShouldPerMachineInstall():Boolean;
var
  perMachine: string;
begin
  Result := False
  perMachine := GetCommandLineParam('--permachine');
    if not (perMachine = 'False') then
    begin
      Result := True;
    end;
end;

function StartsWith(SubStr, S: String): Boolean;
begin
  Result:= Pos(SubStr, S) = 1;
end;

function StringReplace(S, oldSubString, newSubString: String): String;
var
  stringCopy: String;
begin
  stringCopy := S;
  StringChange(stringCopy, oldSubString, newSubString);
  Result := stringCopy;
end;

function GetCommandlineParamValue(inParamName: String): String;
var
   paramNameAndValue: String;
   i: Integer;
begin
   Result := 'False';

   for i := 0 to ParamCount do
   begin
     paramNameAndValue := ParamStr(i);
     if (StartsWith(inParamName, paramNameAndValue)) then
     begin
       Result := StringReplace(paramNameAndValue, inParamName + '=', '');
       break;
     end;
   end;
end;

function GetCustomPathInstall():String;
var
  customPath: string;
begin
  Result := 'False'
  customPath := GetCommandlineParamValue('--customPath');
    if not (customPath = 'False') then
    begin
      Result := customPath;
    end;
end;

#ifdef UNICODE
  #define AW "W"
#else
  #define AW "A"
#endif
type
  HINSTANCE = THandle;

function ShellExecute(hwnd: HWND; lpOperation: string; lpFile: string; lpParameters: string; lpDirectory: string; nShowCmd: Integer): HINSTANCE;
  external 'ShellExecute{#AW}@shell32.dll stdcall';

function GenerateDefaultDir(): string;
begin
  if IsAdminLoggedOn then
  begin
    Result := ExpandConstant('{pf}\{#MyFolderApp}\{#MyAppName}');
  end
    else
  begin
    Result := ExpandConstant('{userappdata}\{#MyAppName}');
  end;
end;


var
  OptionPage: TInputOptionWizardPage;


function doInstall(): boolean;
var
  IsCustomArgument: boolean;
  CustomScript: string;
begin
  IsCustomArgument:= False
  if ShouldSilentInstall() = True then
  begin
    IsCustomArgument:= True
    CustomScript:= CustomScript + '/VERYSILENT' + ' '
  end;
  if ShouldPerMachineInstall() = True then
  begin
    IsCustomArgument:= True
    if IsAdminLoggedOn then
      begin
        CustomScript:= CustomScript + '/DIR='+ ExpandConstant('{pf}\{#MyFolderApp}\{#MyAppName}')  + ' ';
      end
    else
      begin
        MsgBox('required adminitrator permission', mbInformation, MB_OK);
        Abort
      end;
  end;
  if ShouldPerMachineInstall() = False then
    begin
    IsCustomArgument:= True
    CustomScript:= CustomScript + '/DIR='+GenerateDefaultDir() + ' '
    end;
  if not (GetCustomPathInstall() = 'False') then
    begin
      SaveStringToFile(ExpandConstant('{src}\customPath.txt'), GetCustomPathInstall() , True);
      CustomScript:= StringReplace(CustomScript, '/DIR='+ ExpandConstant('{pf}\{#MyFolderApp}\{#MyAppName}'), '')
      CustomScript:= CustomScript + '/DIR='+ ExpandConstant(+GetCustomPathInstall()) + ' '
    end;
  if IsCustomArgument = True then
  begin
    ShellExecute(0, '', ExpandConstant('{srcexe}'), CustomScript, '',SW_SHOW)
    Abort
  end;
  Result := True;
end;
procedure InitializeWizard();
begin
  if ShouldSilentInstall() = True then
    begin
    doInstall()
    Abort
    end;
  if ShouldSilentInstall() = False then
    begin
    OptionPage :=
      CreateInputOptionPage(
        wpWelcome,
        'Choose installation options', 'Who should this application be installed for?',
        'Please select whether you wish to make this software available for all users ' +
          'or just yourself.',
        True, False);

    OptionPage.Add('&Anyone who uses this computer');
    OptionPage.Add('&Only for me');
    if IsAdminLoggedOn then
    begin
      OptionPage.Values[0] := True;
    end
      else
    begin
      OptionPage.Values[1] := True;
      OptionPage.CheckListBox.ItemEnabled[0] := False;
    end;
  end;
end;

function NextButtonClick(CurPageID: Integer): Boolean;
var
  customPathValue: TArrayOfString;
begin
  if (LoadStringsFromFile(ExpandConstant('{src}\customPath.txt'), customPathValue) = False) then
  begin
    if CurPageID = OptionPage.ID then
    begin
      if OptionPage.Values[1] then
      begin
        WizardForm.DirEdit.Text := ExpandConstant('{userappdata}\{#MyAppName}')
      end;
      if OptionPage.Values[0] then
      begin
        WizardForm.DirEdit.Text := ExpandConstant('{pf}\{#MyFolderApp}\{#MyAppName}');
      end;
    end;
  end
  else
  begin
    WizardForm.DirEdit.Text := ExpandConstant(customPathValue[0]);
  end;
  Result := True;
end;

function InitializeSetup(): boolean;
begin
  {doInstall()}
  Result:= True
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  customPathValue: TArrayOfString;
begin
    if CurStep = ssDone then
    begin
      LoadStringsFromFile(ExpandConstant('{src}\customPath.txt'), customPathValue)
      if GetArrayLength(customPathValue) > 0 then
      begin
        DeleteFile(ExpandConstant('{src}\customPath.txt'));
      end;
    end;
end;